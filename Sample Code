firstfunction <- function() {
x <- rnorm(100)
mean(x)
}

second <- function(x) {
			x + rnorm(length(x))
}

 mat <- matrix(1:18,nrow=3, ncol=6)

as.logical(1:6)

> table1 <- matrix(c("Y","Y","N","N",1:4),nrow=4,ncol=2) 
dimnames(table) <- list(1:4,c("Yes or No","number"))

> fac_tab <- factor(table,levels=c("YES","NO")) ###levels

is.na(table) #test for missing
is.nan(table) #test for missing

bad <- is.na(xmd)
xmd[!bad]
vector: x[!is.na(x) & x >0]


> na_total <- sum(is.na(oz))

good <- complete.cases(dtafrm)
dtafrm[good, ][1:7, ]  ## remove missing obs

>table2 <- data.frame(id=1:4,name=c("Mike","Dan","Joe","Bob"))

##find 
hw_data_100 <- read.table("hw1_data.csv", header=TRUE, sep=',', nrows=100)
cla <- sapply(hw_data_100,class)
> hw_data_all <- read.table("hw1_data.csv", header=TRUE, sep=',', colClasses=cla)

> mean2 <-subset(hw,Temp>90 & Ozone>31)

#compare
> identical(vect,vect2)
[1] TRUE

#shape a vector 
dim(my_vector) <-c(4,5)

##for loops
> x <- c("a","b","c","d")
> for(i in 1:4) {
+ print(x[i])
+ }

> for (i in seq_along(x)) {
+ print(x[i])
+ }

###while loop
> while(count<10) {
+ print(count)
+ count<-count+1
+ }

> z<-5
> while (z>3 && z<=10) {
+ print(z)
+ coin<- rbinom(1,1,.5)
+ if(coin==1) {
+ z<- z+1
+ } else {
+ z <- z-1
+ }
+ }

##function

> above <- function(x, n) {
+ use <- x > n
+ x[use]
+ }
> x <- 1:30
> above(x,14)
 [1] 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
> 

col_mean <- function(y, removeNA=TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}

> col_mean(my_data)

###dates

x <- as.Date("1970-02-02")
unclass(x)
[1] 32

> date <- c("January 10, 2012 10:40", "December 6, 2011 9:10")
> date
[1] "January 10, 2012 10:40" "December 6, 2011 9:10" 
> time_string <- strptime(date, "%B %d, %Y %H:%M")
> time_string
[1] "2012-01-10 10:40:00 EST" "2011-12-06 09:10:00 EST"

###loops

###lapply - loop over list and evaluate function on each element (always list)

x <- list (a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
lapply(x, mean)

x<-1:4
lapply(x,runif,min=0,max=10) ###list function arguments in ....

lapply(x,function(asg) asg[ ,1]) ##write function in argument field

###split
f <- gl(3,10)
 lapply(spilt(x,f),mean,drop=TRUE)   ##f has levels, calculates mean by level
						###drop removes missing levels (0 obs)
 lapply(split(airquality,airquality$Month), function(x) colMeans(x[ c("Ozone","Solar.R","Wind")])) ###levels

###factors

fl <- gl(2,5)  ###2 levels repeated 5 times
f2 <- gl(5,2)  ###5 levels repeated twice
str
interaction(f1,f2)
 [1] 1.1 1.1 1.2 1.2 1.3 2.3 2.4 2.4 2.5 2.5
Levels: 1.1 2.1 1.2 2.2 1.3 2.3 1.4 2.4 1.5 2.5


sapply(split(airquality,airquality$Month), function(x) colMeans(x[ c("Ozone","Solar.R","Wind")]))

###sapply - simplied lappy, similar length answers put into vector/matrix

x <- list (a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
> sapply(x,mean)
        a         b         c         d 
2.5000000 0.6121537 1.1505797 5.0421336 

###apply  - apply function over the margins of array

apply(x,1,quantile, probs=c(0.25,0.75))  vector (20 columns)
t(apply(x,1,quantile, probs=c(0.25,0.75))) TRANSPOSE (20 rows)

apply(x,1,mean) ##margin=1, collapse columns (keep dimension #1)
apply(x,2,mean) ##margin=2, collapse rows (keep dimension #2)

rowSums=apply(x,1,sum)
rowMeans=apply(x,1,mean)
colSums=apply(x,2,sum)
colMeans=apply(x,2,mean)

a <- array(rnorm(2 * 2 * 10), c(2,2,10))
apply(a,c(1,2),mean)   ### collapse 3D (10)
rowMeans(a,dims=2)    ### equal to above


###tapply - apply function over subsets of vector

###mapply - multivariate of lapply

mapply(noise,1:5,1:5,2) ###automatically enters arguments for function 'noise'

###split - split objects

